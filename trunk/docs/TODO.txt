See bottom of file for tasks that are 'done' but which have not yet been
moved to HISTORY.txt

Check my bit of paper at home

Tests
    + can we fix LD_LIBRARY_PATH from within python, dispensing with need
      for run.sh and run.bat to set it? Would make running tests easier.
    + there are some test failures on Windows
    + test autodiscovery - does mock have one?
    + use installed rather than embedded mock
    + mock instead of listener

SvgLoad
    + can't load pacman0.svg, for reasons unknown
    + Hole in cygan star is missing (since tessellation for batch creation is
      now receiving clockwise outer and inner loops) Don't fix winding on svg
      load, but retain it, and fix it on sending to pymunk (ie. make outer ones
      clockwise, and filter out inner ones)
    + be robust against unclosed paths (both filled ones for rendering, and
      unfilled ones for collision detection boundaries) Maybe just close all
      paths on load? Aha! SvgLoad should retain final duplicated point on
      closed paths. Conversion to batch and to body should decide if they
      want to strip this, and if they want to silently close loops that do not
      have it.
    + be robust against explicit collision boundaries that aren't convex,
      especially due to tiny data imperfections (eg two or more very close
      points) Maybe convert each collision boundary loop to a convex hull?
    + gradient fills
    + Boundaries, whether derived or explicit, should be automatically split
      into convex polys for pymunk. This would mean autogenerated boundaries
      would be the proper shape, rather than using convex hulls, and explicit
      boundaries would not need manually converting to convex polys.
    + can we mark particular paths to be used as collision boundaries, rather
      than using extra explicit paths? (this would be extra useful if automatic
      splitting into convex polys worked)
    + specify density, elasticity, friction in svg
    + refactor to separate:
        - pure geometry
        - svg (geometry plus attributes (color, path id))
        - solids (svg plus a density per path, inferred from attributes)

Refactor
    + run using installed (rather than embedded)
        - pyglet
        - pymunk
        - shapely
        - mock

Installer
    + windows binary, presumably using py2exe
    + mac? (py2app?)
    + linux?

LevelBuilder
    + should be part of controller, not model
    + figure out why zero-width walls between rooms occur
    + should create walls as minimal data structure, then generate batch
    + and body separately
    + generating body should offset walls and use non-zero width segments
    + add corridors between rooms
    + add a buffer for testing 'new_verts_ok', to prevent non-adjoining rooms
      from coming too close

Infrastructure
    + need an autocombine that generates test suite from all test classes
      in module.
    + or use nose to run tests. delete 'run all tests' and the like?
    * Windows binary distribution, including Shapely DLL
    * Linux binary distribution
    * Need help for Mac binary distribution.
    + auto upload source/binary distributions? set as featured downloads?
      http://code.google.com/p/support/source/browse/trunk/scripts/googlecode_distutils_upload.py
    + startup should assert dependancies being used are local, not installed

Interaction
    + toggle fullscreen key
    + handle window resize

Infrastructure
    + quick architecture diagram. review diffs to reality.
    + consistently use either abs or rel imports for solescion packages
    + make sure tests can be called directly from command line
    + make sure tests can be called directly from vim

Sound
    * sound effects
    * music

Rendering
    * line-of-sight masking
    * Render only rooms, and their contents, that are on-screen and visible.

== DONE ==

* Maze generation
    + integrate Shapely
    * Autogenerate a set of rooms to form a maze of sorts.
        * create a regular poly room from num_faces and first two points
        * choose a random wall from all existing rooms
        * add new room onto chosen wall
        * iterate
        * test for intersections and reject
    * choose a seed to generate an interesting large maze
    + one very large room to represent 'above ground'

Technical Debt
    + fix failing tests
    + tidy up run* all over the place
    + fix pylint
    + move dependancies inside solescion dir?
        I think not. Searches, pylint, nose would all include dependancies
    + source distribution using setuptools instead of zip
    + application takes version number from setup.py
    * setup.py py2exe_zip() creates archive with unwanted 'dist' path cmpt.
    * Windows binary distributable.
    + upload new source/binary versions as featured downloads

Keypresses:
    + quit (done)
    + screenshot (done)

Infrastructure:
    + -v prints version of application and of pyglet, pymunk, shapely & python
    + pause key

Handling
    * left/right controls stop imparting torque at fast spins
    * Damp down the rotation just a little more
    * Probably increase torque control a tad to compensate for that

Tests
    * can't run tests on windows!

Svg Loader
    * Render using GL_TRIANGLES in pyglet batches
    * Load svg from Inkscape to define rigid bodies and their appearance
    (check out squirtle)

