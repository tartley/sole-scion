See bottom of file for tasks that are 'done' but which have not yet been moved
to HISTORY.txt (*=planned task, +=unexpected task)

Maze
    * Handle multiple connected room polygons.
    * Autogenerate a set of rooms to form a maze of sorts.
    + randomly generate in-room rocks

Vehicle
    * keep the thrustship somewhere
    * vehicle: 2 wheels plus chassis
    * drives left, right
    * opposite direction brakes to a standstill
    * traction / rev control

Interaction
    + pause key
    + toggle fullscreen key
    + handle window resize

Testing
    + use michael's Mock instead of our Listener
    + use nose to run tests. delete 'all tests' and the like

Infrastructure
    + test failures on Windows
    + quick architecture diagram
    + consistently use either abs or rel imports for solescion packages
    + dependancies as svn:externals ?
    + check out wossname's cheat sheet of python standard practices,
      http://panela.blog-city.com/more_beginner_python_cheatsheets.htm
    + try out using virtualenv to install dependancies, and get distools
      to find these, rather than packaging them in the svn tree?
    + testutils as a separate package
    + remove #! lines if tests can't be called directly, or if -O flag
      can't be used
    + auto upload source/binary distributions? set as featured downloads?
      http://code.google.com/p/support/source/browse/trunk/scripts/googlecode_distutils_upload.py

Svg Loader
    * Load svg from Inkscape to define rigid bodies and their appearance?
    (check out squirtle)

Levels
    * draw levels instead of randomidsing them?
    * random levels earn resources to access drawn levels?

Sound
    * music
    * sound effects

Rendering
    * Render using GL_TRIANGLES in pyglet batches
    * Render only rooms, and their contents, that are on-screen.
    * Read up on BSPs, scene graphs, spatial indexes.

Harpoon
    * add harpoon to vehicle
    * rendered so you can see direction it points
    * swivels with mouse or keys
    * fired with mousebutton or key
    * embeds on impact
    * cable rendering
    * cable physics - first pass, no collision with walls
    * first pass: vanishes when key released
    * cable reeled with up/down (mouse or keys)
    * releases & rewinds when key is released

Performance
    * measure using cProfile, gProf2dot
    * improve

Rescuees
    * guys. Physics: a disc? Render: a textured quad?
    * Scatter maze with guys to rescue
    * guys wander left / right on flat surfaces
    * guys die in heavy collisions
    * guys climb into vehicle

Completion / Death / Structure
    * ?

Achievements
    * Persist highscores
    * Achievements
        * Longest free-fall
        * Farthest jump (horizontal)
        * Farthest fall (downwards)
        * Fastest speed
        * Hardest impact
        * Longest balance on one wheel

Frills
    + down key grabs the ground, useful for pulling things with the cable
    + suspension
    + brake lights
    + damage
    + dents (in body and wheels)
    + traction control
    + cool skids
    + smoke/dust on cool skids
    + nitro boost
    + harpoon laser sights
    + harpoon collision with room walls


== DONE ==

Technical Debt
    + fix failing tests
    + tidy up run* all over the place
    + fix pylint
    + move dependancies inside solescion dir?
        I think not. Searches, pylint, nose would all include dependancies
    + source distribution using setuptools instead of zip
    + application takes version number from setup.py
    * setup.py py2exe_zip() creates archive with unwanted 'dist' path cmpt.
    * Windows binary distributable.
    + upload new source/binary versions as featured downloads

Keypresses:
    + quit (done)
    + screenshot (done)

